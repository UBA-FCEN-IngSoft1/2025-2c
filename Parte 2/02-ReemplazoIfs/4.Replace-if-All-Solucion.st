!classDefinition: #VehicleTests category: #'4.Replace-if-All-Solucion'!
TestCase subclass: #VehicleTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/19/2025 15:50:19'!
electricMotorcycle

	^ Motorcycle withEngine: ElectricEngine new andSpeedLimiter: SpeedLimiter forCity! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/19/2025 15:50:25'!
gasolineMotorcycle

	^ Motorcycle withEngine: GasolineEngine new andSpeedLimiter: SpeedLimiter forOpenRoad! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/19/2025 15:50:42'!
helicopter

	^ Helicopter withEngine: JetFueledEngine new andSpeedLimiter: SpeedLimiter forAir! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/7/2024 19:13:27'!
test01LandVehicleCannotAccelerateWhileTurnedOff

	| landVehicle |
	
	landVehicle := self electricMotorcycle.
	
	self should: [ landVehicle accelerate ] 
	raise: Error 
	withExceptionDo: [ :error | error messageText = 'Can not run when turned off'.
		self assert: (landVehicle speedAt: (0 * kilometer / hour)) ]
	
	
	! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/7/2024 19:13:55'!
test02AirVehicleCannotAccelerateWhileTurnedOff

	| airVehicle |
	
	airVehicle := self helicopter.
	
	self should: [ airVehicle accelerate ] 
	raise: Error 
	withExceptionDo: [ :error | error messageText = 'Can not fly when turned off'.
		self assert: (airVehicle speedAt: (0 * kilometer / hour)).
		self assert: (airVehicle altitudeAt: (0 * meter)) ]
	
	
	! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/7/2024 19:13:27'!
test03ElectricVehicleAccelerateAsIntended

	| electricVehicle |
	
	electricVehicle := self electricMotorcycle.
	
	electricVehicle turnOn.
	self assert: (electricVehicle speedAt: 0 * kilometer / hour).
	
	electricVehicle accelerate.
	self assert: (electricVehicle speedAt: 10 * kilometer / hour).
	
	electricVehicle accelerate.
	self assert: (electricVehicle speedAt: 40 * kilometer / hour)
	
	
	
	
	! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/7/2024 19:14:10'!
test04GasolineVehicleAccelerateAsIntended

	| gasolineVehicle |
	
	gasolineVehicle := self gasolineMotorcycle.
	
	gasolineVehicle turnOn.
	self assert: (gasolineVehicle speedAt: 0 * kilometer / hour).
	
	gasolineVehicle accelerate.
	self assert: (gasolineVehicle speedAt: 10 * kilometer / hour).
	
	gasolineVehicle accelerate.
	self assert: (gasolineVehicle speedAt: 20 * kilometer / hour)
	
	
	
	
	! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/7/2024 19:13:55'!
test05JetFueledVehicleAccelerateAsIntended

	| jetFueledVehicle |
	
	jetFueledVehicle := self helicopter.
	
	jetFueledVehicle turnOn.
	self assert: (jetFueledVehicle speedAt: 0 * kilometer / hour).
	
	jetFueledVehicle accelerate.
	self assert: (jetFueledVehicle speedAt: 1 * kilometer / hour).
	
	jetFueledVehicle accelerate.
	self assert: (jetFueledVehicle speedAt: 5 * kilometer / hour).
	
	jetFueledVehicle accelerate.
	self assert: (jetFueledVehicle speedAt: 41 * kilometer / hour)
	
	
	
	
	! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/7/2024 19:13:55'!
test06AirVehicleGoesUpAsItAcceleratesAsExpected

	| airVehicle |
	
	airVehicle := self helicopter.
	
	airVehicle turnOn.
	self assert: (airVehicle altitudeAt: 0 * meter).
	
	airVehicle accelerate.
	self assert: (airVehicle altitudeAt: 5 * meter).
	
	airVehicle accelerate.
	self assert: (airVehicle altitudeAt: 10 * meter)
	
	! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/7/2024 19:13:27'!
test07SpeedLimiterForCityLimitsSpeedAt70Kmh

	| cityVehicle |
	
	cityVehicle := self electricMotorcycle.
	
	cityVehicle turnOn.
	self assert: (cityVehicle speedAt: 0 * kilometer / hour).
	
	20 timesRepeat: [ cityVehicle accelerate ].
	
	self assert: (cityVehicle speedAt: 70 * kilometer / hour)
	
	
	! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/7/2024 19:14:10'!
test08SpeedLimiterForOpenRoadLimitsSpeedAt130Kmh

	| openRoadVehicle |
	
	openRoadVehicle := self gasolineMotorcycle.
	
	openRoadVehicle turnOn.
	self assert: (openRoadVehicle speedAt: 0 * kilometer / hour).
	
	20 timesRepeat: [ openRoadVehicle accelerate ].
	
	self assert: (openRoadVehicle speedAt: 130 * kilometer / hour)
	
	
	! !

!VehicleTests methodsFor: 'testing' stamp: 'NR 9/7/2024 19:13:55'!
test09SpeedLimiterForAirTrafficLimitsSpeedAt500Kmh

	| vehicleInAir |
	
	vehicleInAir := self helicopter.
	
	vehicleInAir turnOn.
	self assert: (vehicleInAir speedAt: 0 * kilometer / hour).
	
	20 timesRepeat: [ vehicleInAir accelerate ].
	
	self assert: (vehicleInAir speedAt: 500 * kilometer / hour)
	
	
	! !


!classDefinition: #Engine category: #'4.Replace-if-All-Solucion'!
Object subclass: #Engine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!Engine methodsFor: 'torque' stamp: 'NR 9/7/2024 07:07:35'!
acceleration: currentSpeed

	self subclassResponsibility ! !


!classDefinition: #ElectricEngine category: #'4.Replace-if-All-Solucion'!
Engine subclass: #ElectricEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!ElectricEngine methodsFor: 'torque' stamp: 'NR 9/7/2024 08:48:18'!
acceleration: currentSpeed

	^ (currentSpeed + (5 * kilometer / hour)) * 2! !


!classDefinition: #GasolineEngine category: #'4.Replace-if-All-Solucion'!
Engine subclass: #GasolineEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!GasolineEngine methodsFor: 'torque' stamp: 'NR 9/7/2024 07:20:10'!
acceleration: currentSpeed

	^ 10 * kilometer / hour! !


!classDefinition: #JetFueledEngine category: #'4.Replace-if-All-Solucion'!
Engine subclass: #JetFueledEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!JetFueledEngine methodsFor: 'torque' stamp: 'NR 9/7/2024 08:10:22'!
acceleration: currentSpeed

	^ ((currentSpeed amount + 1) ^ 2) * kilometer / hour! !


!classDefinition: #PowerStatus category: #'4.Replace-if-All-Solucion'!
Object subclass: #PowerStatus
	instanceVariableNames: 'vehicleToPower'
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!PowerStatus methodsFor: 'accelerate' stamp: 'NR 9/10/2024 16:08:50'!
accelerate

	self subclassResponsibility! !


!PowerStatus methodsFor: 'initialization' stamp: 'NR 4/3/2025 19:27:41'!
initializePowerStatusOf: vehicle

	vehicleToPower := vehicle ! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'PowerStatus class' category: #'4.Replace-if-All-Solucion'!
PowerStatus class
	instanceVariableNames: ''!

!PowerStatus class methodsFor: 'instance creation' stamp: 'NR 4/3/2025 19:27:31'!
on: vehicle

	^ self new initializePowerStatusOf: vehicle ! !


!classDefinition: #PowerOff category: #'4.Replace-if-All-Solucion'!
PowerStatus subclass: #PowerOff
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!PowerOff methodsFor: 'accelerate' stamp: 'NR 4/3/2025 19:26:34'!
accelerate

	vehicleToPower accelerateWhenTurnedOff! !


!classDefinition: #PowerOn category: #'4.Replace-if-All-Solucion'!
PowerStatus subclass: #PowerOn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!PowerOn methodsFor: 'accelerate' stamp: 'NR 4/3/2025 19:26:34'!
accelerate 

	vehicleToPower accelerateWhenTurnedOn! !


!classDefinition: #SpeedLimiter category: #'4.Replace-if-All-Solucion'!
Object subclass: #SpeedLimiter
	instanceVariableNames: 'limit'
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!SpeedLimiter methodsFor: 'initialization' stamp: 'NR 9/6/2024 16:25:39'!
initializeWithLimit: aSpeedLimit

	limit := aSpeedLimit! !


!SpeedLimiter methodsFor: 'limit' stamp: 'NR 9/7/2024 07:33:10'!
limit: aSpeed
	
	^ aSpeed min: limit! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'SpeedLimiter class' category: #'4.Replace-if-All-Solucion'!
SpeedLimiter class
	instanceVariableNames: ''!

!SpeedLimiter class methodsFor: 'instance creation' stamp: 'NR 9/19/2025 15:49:49'!
forAir

	^ self limit: 500 * kilometer / hour! !

!SpeedLimiter class methodsFor: 'instance creation' stamp: 'NR 9/19/2025 15:49:54'!
forCity

	^ self limit: 70 * kilometer / hour! !

!SpeedLimiter class methodsFor: 'instance creation' stamp: 'NR 9/19/2025 15:49:57'!
forOpenRoad

	^ self limit: 130 * kilometer / hour! !

!SpeedLimiter class methodsFor: 'instance creation' stamp: 'NR 9/6/2024 16:24:47'!
limit: aSpeedLimit

	^ self new initializeWithLimit: aSpeedLimit ! !


!classDefinition: #Vehicle category: #'4.Replace-if-All-Solucion'!
Object subclass: #Vehicle
	instanceVariableNames: 'powerStatus speed engine speedLimiter'
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!Vehicle methodsFor: 'initialization' stamp: 'NR 4/3/2025 19:31:40'!
initializeWithEngine: anEngine andSpeedLimiter: aSpeedLimiter

	self turnOff.
	speed := 0 * kilometer / hour.
	engine := anEngine.
	speedLimiter := aSpeedLimiter! !


!Vehicle methodsFor: 'move' stamp: 'NR 9/10/2024 16:08:20'!
accelerate

	powerStatus accelerate! !

!Vehicle methodsFor: 'move' stamp: 'ARM 9/6/2024 14:51:44'!
accelerateWhenTurnedOff

	self error: self canNotAccelerateErrorMessage! !

!Vehicle methodsFor: 'move' stamp: 'NR 9/12/2024 23:38:59'!
accelerateWhenTurnedOn

	speed := speedLimiter limit: self accelerationSpeed! !

!Vehicle methodsFor: 'move' stamp: 'NR 9/12/2024 23:38:53'!
accelerationSpeed

	^ speed + (engine acceleration: speed)! !

!Vehicle methodsFor: 'move' stamp: 'NR 9/7/2024 18:58:08'!
speedAt: aSpeed

	^ speed = aSpeed! !


!Vehicle methodsFor: 'on/off' stamp: 'NR 4/3/2025 19:33:03'!
turnOff

	powerStatus := PowerOff on: self! !

!Vehicle methodsFor: 'on/off' stamp: 'NR 4/3/2025 19:29:25'!
turnOn

	powerStatus := PowerOn on: self! !


!Vehicle methodsFor: 'error messages' stamp: 'ARM 9/6/2024 14:52:47'!
canNotAccelerateErrorMessage

	self subclassResponsibility! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Vehicle class' category: #'4.Replace-if-All-Solucion'!
Vehicle class
	instanceVariableNames: ''!

!Vehicle class methodsFor: 'instance creation' stamp: 'NR 9/7/2024 07:21:07'!
withEngine: anEngine andSpeedLimiter: aSpeedLimiter

	^ self new initializeWithEngine: anEngine andSpeedLimiter: aSpeedLimiter
	! !


!classDefinition: #Helicopter category: #'4.Replace-if-All-Solucion'!
Vehicle subclass: #Helicopter
	instanceVariableNames: 'altitude'
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!Helicopter methodsFor: 'initialization' stamp: 'NR 9/7/2024 08:05:46'!
initializeWithEngine: anEngine andSpeedLimiter: aSpeedLimiter 

	super initializeWithEngine: anEngine andSpeedLimiter: aSpeedLimiter.
	altitude := 0 * meter! !


!Helicopter methodsFor: 'error messages' stamp: 'NR 4/3/2025 19:30:11'!
canNotAccelerateErrorMessage

	^ 'Can not fly when turned off'! !


!Helicopter methodsFor: 'move' stamp: 'NR 9/7/2024 19:10:17'!
accelerateWhenTurnedOn

	super accelerateWhenTurnedOn.
	altitude := altitude + (5 * meter)! !

!Helicopter methodsFor: 'move' stamp: 'NR 9/7/2024 18:59:11'!
altitudeAt: anAltitude

	^ altitude = anAltitude! !


!classDefinition: #Motorcycle category: #'4.Replace-if-All-Solucion'!
Vehicle subclass: #Motorcycle
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '4.Replace-if-All-Solucion'!

!Motorcycle methodsFor: 'error messages' stamp: 'NR 4/3/2025 19:30:06'!
canNotAccelerateErrorMessage

	^ 'Can not run when turned off'! !
